package layer_test

import (
	"fmt"
	"main/layer"
	"testing"

	"gonum.org/v1/gonum/mat"
)

func TestConvolutionInit(t *testing.T) {
	l := layer.ConvolutionLayer{}
	l.Initialization(layer.InputShape{1, 10, 10}, 2, 3)

	if l.OutputShape.Depths != 2 || l.OutputShape.Height != 8 || l.OutputShape.Width != 8 {
		t.Fatal("Incorrect OutputShape")
	}

	if l.KernelShape.Depths != 2 || l.KernelShape.InputDepths != 1 || l.KernelShape.Width != 3 || l.KernelShape.Height != 3 {
		t.Fatal("Incorrect KernelShape")
	}

	if len(l.Kernels) != 2 || len(l.Kernels[0]) != 1 {
		t.Fatal("Incorrect Kernels allocation")
	}

	if len(l.Biases) != l.Depths {
		t.Fatal("Incorrect Biases allocation")
	}
}

func TestConvolutionForwardPass(t *testing.T) {
	l := layer.ConvolutionLayer{}
	l.Initialization(layer.InputShape{1, 10, 10}, 2, 3)

	// TODO: can I used seed value for random here?

	l.Kernels[0][0] = *mat.NewDense(3, 3, []float64{1.3309064207870653, 0.08197051701862368, -0.26389518652373517, 0.4272530997098567, -1.8388607067286102, 0.26925137281917755, -0.020842629298284288, 0.9387212146319451, 0.449464133554745})
	l.Kernels[1][0] = *mat.NewDense(3, 3, []float64{1.8274497663399063, -1.895195531766507, -0.44684654770810794, -0.9255922358662261, 0.22980404078549904, 0.8353944066033807, -1.132165497848182, -0.08146696896968592, 0.27738609031797923})

	l.Biases[0] = *mat.NewDense(8, 8, []float64{-0.3029533729005304, -0.7051060507886777, 0.10176375662682147, -0.5228573312657052, 0.2201173431447101, 0.8659662544442309, 1.7085732759921157, -0.8397054568315687, -0.24262472053921424, 1.1997646023592488, 0.2882872536477852, 0.9934416135396115, 0.5468360217129595, 0.22071728475858277, -1.7188713930489774, -0.5787753513122257, -0.7331288045169643, 0.7807613344796446, 0.016259474741740138, 1.244054013507288, 0.229983797602092, 0.15549522847055947, 2.2574087696690652, 0.3985295465926434, -0.004252432418162755, 1.3412119732069854, 0.8087783263072708, -0.5114686494208733, -0.532027726053701, -0.7001752591427417, 0.43050285818281964, -0.9174504710713481, 0.4491590650298046, -1.1259323844985833, 0.8185412501721295, -0.11545317508750164, 1.6146587333250455, 0.29389824874654336, -1.2521230683016444, 0.28316584132533185, 0.09472397435633906, -0.8355805651635575, 0.49779600481184494, -0.22089192898996735, 2.182252607551023, -1.7838017762074625, 1.9351865019002095, 0.07854882880298064, -0.5859452610624529, -0.6716801723573033, -1.2632453726379849, 0.5553564657313764, 0.48149664271561043, -1.7160946983150538, -0.48366271974384323, 1.2268314235861768, 1.0325725256572584, -1.36765456464101, 0.3943096641462105, 0.6682113523857032, 1.74665416679131, 0.19339224347937217, 0.036453395804898814, 0.26326480465075597})
	l.Biases[1] = *mat.NewDense(8, 8, []float64{1.1990284154612914, -0.6238933710502844, -0.7933532833333272, 0.8084963414283802, 0.7196430009116095, 0.05924361593311389, 1.9169646474527138, 1.152116754477549, -0.10363705149499536, 0.2875250715058941, 0.612433871158587, -1.3090003450335677, 1.0387044045329825, -0.44874036525643723, -0.7448220767760477, 0.11939402106312003, 0.20872377212414495, 0.7028312534097987, 0.2648299225216353, 0.10944525143602007, -0.37983124028268517, -0.3744969007713799, -3.0203885859515367, 1.0445987933633867, 1.1844591665204995, 2.0004196641155962, -0.2689966632048434, -0.5101234294099426, -2.0217853538243116, 0.9287629192760422, -0.02566393191664118, 4.117811376518929, 2.4139433213821726, 0.013915209959618091, 0.49868551870630806, -0.4993028797503426, -1.4116012745353692, -1.1152640390974753, 0.6122704078112788, -0.4562729477612416, -1.4051816428091606, 1.7733440313490636, 1.1737949724471402, 1.1522226223140573, -0.011230310359654355, 1.2329527447895496, -1.008767911665371, 0.26654588292094744, 0.9499477902673146, 0.19687985645813988, 2.9301358841299234, -1.1432953863095106, 0.5640528823453854, 1.9117199505714189, 0.6039059565127556, -1.1932853681899114, -1.4342958647521789, 1.227517089633961, 0.2894268981576598, -0.4929328379300122, -0.006315148903057732, 1.4921296943886255, 0.28961322468555156, -0.2853394438259287})

	// TODO:
	// Kernels - 2 * 1 * 10 * 10
	// Biases - 2 * 8 * 8
	inputData := mat.NewDense(1, 10*10, nil)
	for i := 0; i < 100; i++ {
		inputData.Set(0, i, float64(i))
	}
	l.Forward(inputData, true)

	output := l.Output
	fmt.Println(output.RawMatrix().Data)

	if len(output.RawMatrix().Data) != l.OutputShape.TotalSize() {
		t.Fatal("Incorrect output")
	}

	// TODO: generate input data
}
